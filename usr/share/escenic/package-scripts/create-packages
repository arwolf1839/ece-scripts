#! /usr/bin/env bash

# script for creating DEB and RPM packages of the vosa, ece-install
# and ece scripts.

# by tkj@vizrt.com

target_dir=/tmp/$(basename $0)-$(date --iso)
package_name=escenic-content-engine-installer
package_version=$(date +%Y-%m-%d.%H%M%S)
default_maintainer_name="Torstein Krause Johansen"
default_maintainer_email=tkj@vizrt.com
wget_opts="--continue --inet4-only --quiet"

function clean_up() {
  rm -rf $target_dir
}

function list_packages_that_can_be_built() {
  declare -F | grep set_up | cut -d'_' -f3-
}

function get_user_options() {
  while getopts ":p:e:n:r:l" opt; do
    case $opt in
      l)
        list_packages_that_can_be_built
        exit 0
        ;;
      e)
        maintainer_email=${OPTARG}
        ;;
      n)
        maintainer_name=${OPTARG}
        ;;
      r)
        package_version=${OPTARG}
        ;;
      p)
        package_name=${OPTARG}
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
  
}

function create_target_directory() {
  if [[ $package_name == "escenic-content-engine-installer" ]]; then
    set_up_escenic-content-engine-installer
  elif [[ $package_name == "escenic-content-engine-scripts" ]]; then
    set_up_escenic-content-engine-scripts
  elif [[ $package_name == "vosa" ]]; then
    set_up_vosa
  elif [[ $package_name == "escenic-build-scripts" ]]; then
    set_up_escenic-build-scripts
  elif [[ $package_name == "escenic-common-scripts" ]]; then
    set_up_escenic-common-scripts
  elif [[ $package_name == "escenic-munin-plugins" ]]; then
    set_up_escenic-munin-plugins
  elif [[ $package_name == "escenic-check-mk-plugins" ]]; then
    set_up_escenic-check-mk-plugins
  elif [[ $package_name == "hugin-node" ]]; then
    set_up_hugin-node
  elif [[ $package_name == "spore" ]]; then
    set_up_spore
  fi

  debian_dir=$target_dir/DEBIAN
  mkdir -p $debian_dir
  cp debian/${package_name}/* $debian_dir
}

function set_up_escenic-content-engine-installer() {
  mkdir -p $target_dir/{etc,usr,/etc/default}
  mkdir -p $target_dir/usr/{bin,sbin,share/doc}
  mkdir -p $target_dir/usr/share/doc/escenic/examples
  mkdir -p $target_dir/usr/share/escenic/ece-scripts
  
  cp -r ../../../sbin/ece-install $target_dir/usr/sbin/
  cp -r ../../escenic/ece-scripts/ece-install.d/ \
    $target_dir/usr/share/escenic/ece-scripts/
  cp -r ../../doc/escenic/ece-install-guide.org \
    $target_dir/usr/share/doc/escenic
  cp -r ../../doc/escenic/examples/ece-install-*.conf \
    $target_dir/usr/share/doc/escenic/examples/
}

function set_up_escenic-build-scripts() {
  mkdir -p $target_dir/usr/bin
  cp ../build-scripts/ece-build $target_dir/usr/bin/ece-build
  cp ../build-scripts/ece-builder $target_dir/usr/bin/ece-builder
}

function set_up_escenic-content-engine-scripts() {
  mkdir -p $target_dir/etc/bash_completion.d
  mkdir -p $target_dir/etc/cron.daily/
  mkdir -p $target_dir/etc/init.d
  mkdir -p $target_dir/usr/share/doc/escenic
  mkdir -p $target_dir/usr/share/escenic/ece-scripts
  mkdir -p $target_dir/usr/{bin,sbin,share/doc}
  mkdir -p $target_dir/{etc,usr,/etc/default}

  # bin
  local bin_list='ece ece-import'
  for el in $bin_list; do
    cp -r ../../../bin/$el $target_dir/usr/bin/
    cp -r ../../escenic/ece-scripts/${el}.d/ \
      $target_dir/usr/share/escenic/ece-scripts/
  done

  # sbin
  cp ../../../sbin/ece-deploy $target_dir/usr/sbin/

  # conf
  cp -r ../../../../etc/escenic/ $target_dir/etc/
  cp -r ../../../../etc/bash_completion.d/ece \
    $target_dir/etc/bash_completion.d
  # we don't include /etc/default/ece as this file often is also
  # included in the conf packages.
  # cp -r ../../../../etc/default/ece $target_dir/etc/default/
  cp -r ../../../../etc/init.d/ece $target_dir/etc/init.d/

  # doc
  cp -r ../../doc/escenic/ece-guide.org \
    $target_dir/usr/share/doc/escenic

  # cron
  cp -r ../../../../etc/cron.daily/remove-old-escenic-log-files \
    $target_dir/etc/cron.daily/

  # hugin
  cp -r ../../../../usr/share/hugin \
    $target_dir/usr/share/
}

function set_up_vosa() {
  mkdir -p $target_dir/{etc,usr,/etc/default}
  mkdir -p $target_dir/usr/{bin,sbin,share/doc}
  mkdir -p $target_dir/usr/share/doc/vosa
  mkdir -p $target_dir/etc/bash_completion.d
  mkdir -p $target_dir/etc/init.d
  
  cp -r ../../../bin/vosa $target_dir/usr/bin/
  cp -r ../../../bin/vosa-push $target_dir/usr/bin/
  cp -r ../../vizrt/ $target_dir/usr/share/
  cp -r ../../doc/vizrt/*.org $target_dir/usr/share/doc/vosa/
  cp -r ../../../../etc/bash_completion.d/vosa \
    $target_dir/etc/bash_completion.d/
  cp -r ../../../../etc/init.d/vosa $target_dir/etc/init.d/
}

function set_up_escenic-common-scripts() {
  mkdir -p $target_dir/{etc,usr,/etc/default}
  mkdir -p $target_dir/usr/{bin,sbin,share/doc}
  mkdir -p $target_dir/usr/share/doc/escenic
  mkdir -p $target_dir/usr/share/escenic/ece-scripts
  
  # system-info is useful for all packages, hence goes to
  # escenic-common-scripts.
  cp -r ../../../bin/system-info $target_dir/usr/bin/
  cp -r ../../escenic/ece-scripts/system-info.d \
    $target_dir/usr/share/escenic/ece-scripts/
  cp ../../../../etc/default/system-info $target_dir/etc/default/
  cp -r ../../doc/escenic/system-info-guide.org \
    $target_dir/usr/share/doc/escenic
  
  # both the installer and ece-scripts use the common scripts and
  # web resources.
  cp -r ../../escenic/ece-scripts/common* \
    $target_dir/usr/share/escenic/ece-scripts/
  cp -r ../../escenic/ece-scripts/*.css \
    $target_dir/usr/share/escenic/ece-scripts/
  cp -r ../../escenic/ece-scripts/*.html \
    $target_dir/usr/share/escenic/ece-scripts/

  # everyone can need some network syncing
  cp -r ../../../bin/sync-network-drive $target_dir/usr/bin/
}

function set_up_escenic-check-mk-plugins() {
  mkdir -p $target_dir/usr/lib/check_mk_agent/local
  cp -r ../../../lib/check_mk_agent/local/* \
    $target_dir/usr/lib/check_mk_agent/local/
}

function set_up_escenic-munin-plugins() {
  mkdir -p $target_dir/usr/share/munin/plugins
  local doc_dir=$target_dir/usr/share/doc/escenic/escenic-munin-plugin
  mkdir -p $doc_dir

  local dir=$(mktemp -d)
  (
    cd $dir
    wget $wget_opts https://github.com/mogsie/escenic-munin/tarball/master
    tar xzf master
    cp $dir/mogsie-escenic-munin*/*_ $target_dir/usr/share/munin/plugins
    cp $dir/mogsie-escenic-munin*/README.md $doc_dir
    cp $dir/mogsie-escenic-munin*/site/* $doc_dir
    
    chmod 755 $file $target_dir/usr/share/munin/plugins
  )
  rm -rf $dir
}

function set_up_hugin-node() {
  mkdir -p $target_dir/etc/{hugin.often,hugin.hourly,hugin.daily,hugin.weekly,cron.d}
  mkdir -p $target_dir/usr/{bin,sbin,share/doc/hugin,share/hugin}
  mkdir -p $target_dir/var/lib/hugin
  
  local dir=$(mktemp -d)
  (
    cd $dir
    wget $wget_opts https://bitbucket.org/mogsie/hugin/get/default.tar.gz
    tar xzf default.tar.gz
    cp $dir/mogsie-hugin-*/bin/* $target_dir/usr/bin
    cp $dir/mogsie-hugin-*/sbin/* $target_dir/usr/sbin
    cp $dir/mogsie-hugin-*/etc/* $target_dir/etc
    cp $dir/mogsie-hugin-*/cron/* $target_dir/etc/cron.d/
    cp $dir/mogsie-hugin-*/checks/* $target_dir/usr/share/hugin/
    cp $dir/mogsie-hugin-*/README.md $target_dir/usr/share/doc/hugin

    # chmod 755 $file $target_dir/usr/bin/*
  )
  rm -rf $dir
}

function set_up_spore() {
  mkdir -p $target_dir/usr/bin \
           $target_dir/usr/share/doc/spore

  local dir=$(mktemp -d)
  (
    cd $dir
    wget $wget_opts https://github.com/vizrt/spore/archive/master.tar.gz 
    tar xzf master.tar.gz
    cp $dir/spore-master/bin/* $target_dir/usr/bin
    cp $dir/spore-master/README.md $target_dir/usr/share/doc/spore
    cp -r $dir/spore-master/examples $target_dir/usr/share/doc/spore/examples
  )
  rm -rf $dir
}

function get_name() {
  echo ${maintainer_name-$default_maintainer_name}
}

function get_email() {
  echo ${maintainer_email-$default_maintainer_email}
}

function create_packages() {
  sed -i "s#VERSION#${package_version}#g" $debian_dir/control
  sed -i "s#MAINTAINER_NAME#$(get_name)#g" $debian_dir/control
  sed -i "s#MAINTAINER_EMAIL#$(get_email)#g" $debian_dir/control
  find ${target_dir}/usr/{bin,sbin}/ -type f 2>/dev/null | while read f; do
    sed -i "s#^ece_scripts_version=.*#ece_scripts_version=${package_version}#g" \
      $f
  done
  
  # fix permissions
  if [ -e $debian_dir/postinst ]; then
    chmod 755 $debian_dir/postinst
  fi
  
  if [ ! -x /usr/bin/dpkg-deb ]; then
    echo "You must have dpkg-deb installed :-("
    exit 1
  fi

  fakeroot dpkg-deb --build $target_dir \
    2>&1 > /dev/null
  mv ${target_dir}.deb $target_dir/${package_name}-${package_version}.deb
  
  if [[ -x /usr/bin/alien && -x /usr/bin/fakeroot ]]; then
    (
      cd $target_dir
      fakeroot alien --keep-version --to-rpm --scripts \
        ${package_name}-${package_version}.deb \
        2>&1 > /dev/null
    )
  else
    echo "You must have 'alien' and 'fakeroot' installed to create RPMs"
    exit 1
  fi
}  

function list_packages() {
  echo "Sir, the packages are now ready:"
  echo $target_dir/*.{deb,rpm}
}

clean_up
get_user_options $@
create_target_directory
create_packages
list_packages
