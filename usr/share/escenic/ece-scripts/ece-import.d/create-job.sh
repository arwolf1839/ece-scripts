## $1 :: publication
## $2 :: import name
function create_import_directories() {
  # we include log and pid_file's directories here to get the
  # ownership right.
  local dir_list="
    $(dirname $log)
    $escenic_spool_base_dir/$1/$2/archive
    $escenic_spool_base_dir/$1/$2/error
    $escenic_spool_base_dir/$1/$2/new 
    $raw_spool_base_dir/$1/$2
    $raw_state_base_dir/$1/$2
    $raw_transformation_base_dir/$1/$2 \
    $raw_transformed_base_dir/$1/$2 \
    $raw_transformed_base_dir/$1/$2/failed \
    $raw_transformed_base_dir/$1/$2/succeeded \
    $transformers_base_dir/$1/$2
  "
  for dir in $dir_list; do
    log "Creating directory" $dir
    make_dir $dir
    run chown ${escenic_user}:${escenic_group} $dir
  done
}

function create_import_configuration() {
  local publication_name=$1
  local job_name=$2
  
  print_and_log "Creating import job configuration '${job_name}' for" \
    "publication '${publication_name}' ..."

  local job_nursery_fragment=imports/$publication_name/${job_name}
  local file=$nursery_base_dir/${job_nursery_fragment}.properties
  make_dir $(dirname $file)
  cat > $file <<EOF
## Import configuration generated by $(basename $0) @ $(date)
\$class=com.escenic.syndication.xml.XMLImportConfiguration

archiveDirectory=${escenic_spool_base_dir}/${publication_name}/${job_name}/archive
defaultSectionName=${import_section_name-ece_incoming}
defaultUserName=${import_user_name-${publication_name}_admin}
errorDirectory=${escenic_spool_base_dir}/${publication_name}/${job_name}/error
fileNames=*.xml
importDirectory=${escenic_spool_base_dir}/${publication_name}/${job_name}/new
importReporter=/com/escenic/syndication/xml/ImportReporter
publicationName=${publication_name}
EOF

  print_and_log $(green NEW) \
    "Import Nursery component created for you in ${file}"

  import_configuration_list="
    ${job_nursery_fragment}
    ${import_configuration_list}
  "
}

function apply_import_archive() {
  local tmp_dir=$(mktemp -d)
  extract_archive $import_archive $tmp_dir

  local publication_list=$(
    find $tmp_dir/ -maxdepth 1 -type d | sed "s#${tmp_dir}/##g"
  )
  if [ -z "$publication_list" ]; then
    print_and_log "$(red ERROR) No publications were found inside" \
      "$import_archive please re-read the import job specification" \
      "and fix your archive structure"
    remove_pid_and_exit_in_error
  fi
  
  for el in $publication_list; do
    local import_job_list=$(
      find $tmp_dir/$el -maxdepth 1 -type d | sed "s#${tmp_dir}/$el##g" | \
        sed 's#^/##g'
    )
    if [ -z "$import_job_list" ]; then
      print_and_log "$(red ERROR) No import jobs were defined for publication" \
        "$el. The import archive isn't in accordance with the import archive" \
        "specification, so I'll exit :-('"
      remove_pid_and_exit_in_error
    fi
    
    for ele in $import_job_list; do
      print_and_log "Setting up import job '$ele' for publication '$el' ..."
      create_import_configuration $el $ele

      local src_dir=$tmp_dir/$el/$ele/transformers
      local target_dir=$transformers_base_dir/$el/$ele
      if [ -d $src_dir ]; then
        print_and_log "Copying transformers to $target_dir"
        make_dir $target_dir
        run cp $src_dir/[0-9]* $target_dir
      fi

      create_import_cron_jobs $el $ele $tmp_dir/$el/$ele
      create_import_directories $el $ele
    done
  done

  run rm -rf ${tmp_dir}
}


## $1 : publication
## $2 : job
## $3 : archive directory of $1 and $2
function create_import_cron_jobs() {
  if [[ $(whoami) != "root" ]]; then
    print_and_log $(red WARN) \
      "You need to be root to set up the cron jobs, skipping it."
    return
  fi
  
  local file=/etc/cron.d/$1-$2-cron
  echo > $file
  
  find $3 -maxdepth 3 -name "cron*minutes" -type d | while read f; do
    dir=$(basename $f)
    minutes=$(echo $dir | cut -d'.' -f3)
    for el in $(find $3/$dir -type f); do
      local target_dir=$transformers_base_dir/$1/$2/$dir
      make_dir $target_dir
      run cp --force $el $target_dir
      # it's  important that all cron scripts are executable'
      run chmod +x $target_dir/*
      echo "*/${minutes} * * * * $target_dir/$(basename $el) >> $log_base_dir/$1-$2-$(basename $el).log" \
        >> $file
      exit 1
    done
  done


  # remove empty cron files
  if [ $(wc -c $file | cut -d' ' -f1) -lt 2 ]; then
    run rm $file
  else
    print_and_log $(green NEW) "cron job(s) set up in $file"
  fi
}

function print_manual_steps() {
  if [ -z "${import_configuration_list}" ]; then
    return
  fi
    
  print_and_log "You must now add your new Nursery components: " \

  for el in $import_configuration_list; do
    print_and_log "$(green ADD) /${el}"
  done
  
  print_and_log "to the $(blue importConfigurations) variable in " \
    "your ECE instance's" \
    "/com/escenic/syndication/xml/XMLImportService e.g.:" \
    "/etc/escenic/engine/server/edit2-engine1/com/escenic/syndication/xml/XMLImportService.properties"

  print_and_log "The final step is to add the Nursery service " \
    "service.9.9-xml-import-service=/com/escenic/syndication/xml/XMLImportSchedule" \
    "to your instance's Initial component, e.g.:" \
    /etc/escenic/engine/server/edit2-engine1/Initial.properties
}


