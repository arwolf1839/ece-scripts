#! /usr/bin/env bash

## Runs one VOSA import job one time. The output is XML suitable for
## the standard Escenic Syndication XML import job.
##
## The script can also create an import job from an import job archive
## 
##  See /usr/share/doc/vizrt/vosa-handbook/import-jobs.org for more
##  details on the structures this command operates on.

common_libraries="
  /usr/share/escenic/ece-scripts/common-bashing.sh
  /usr/share/escenic/ece-scripts/common-io.sh
"

for el in $common_libraries; do
  source $el || {
    echo "$(basename $0): Could not load the library $el," \
      "and I can't live without it :-(" | fmt
    exit 1
  }
done


pid_file=/var/run/escenic/$(basename $0).pid
log=/var/log/escenic/$(basename $0).log

job_name=""
publication_name=""
transformers_base_dir=/usr/share/escenic/import
raw_spool_base_dir=/var/spool/escenic/raw
escenic_spool_base_dir=/var/spool/escenic/import

COMMAND_IMPORT=1
COMMAND_CRETAE_IMPORT_CONFIGURATION=1
command=COMMAND_IMPORT

function get_user_input() {
  local next_is_name=0
  local next_is_publication=0
  local next_is_conf_file=0
  
  for el in $@; do
    if [[ "$el" == "-n" || "$el" == "--name" ]]; then
      next_is_name=1
    elif [[ "$el" == "-p" || "$el" == "--publication" ]]; then
      next_is_publication=1
    elif [[ "$el" == "-f" || "$el" == "--conf-file" ]]; then
      next_is_conf_file=1
    elif [ $next_is_name -eq 1 ]; then
      job_name=$el
      next_is_name=0
    elif [ $next_is_publication -eq 1 ]; then
      publication_name=$el
      next_is_publication=0
    elif [ $next_is_conf_file -eq 1 ]; then
      conf_file=$el
      next_is_conf_file=0
    else
      if [[ "$el" == "create" ]]; then
        command=COMMAND_CRETAE_IMPORT_CONFIGURATION
      fi
    fi
  done

  local errors=0
  if [ -z $job_name ]; then
    print_and_log "You must specify which import job to run"
    print_and_log "E.g.: $(basename $0) --name video"
    errors=1
  fi
  if [ -z $publication_name ]; then
    print_and_log "You must specify the publication name"
    print_and_log "E.g.: $(basename $0) --publication mypub"
    errors=1
  fi
  if [ -n "${conf_file}" -a ! -r "${conf_file}" ]; then
    print_and_log "You have specified a print job conf file" \
      "but it doesn't exist :-()"
    remove_pid_and_exit_in_error
  fi
  if [ $errors -eq 1 ]; then
    remove_pid_and_exit_in_error
  fi

  print_and_log "Running the import job $job_name"
}

function check_pre_requisites() {
  local required_dir_list="
    $(dirname $pid_file)
    $(dirname $log)
    ${raw_spool_base_dir}
    ${escenic_spool_base_dir}
    ${transformers_base_dir}
  "
  for dir in $required_dir_list; do
    if [ ! -w $dir ]; then
      echo "The directory $dir must exist and be writable by user $USER" \
        " for $(basename $0) to work" | fmt
      exit 1
    fi
  done

  local required_command_list="
    xsltproc
    xmllint
  "
  
  for el in $required_command_list; do
    which $el > /dev/null 2>/dev/null
    if [ $? -gt 0 ]; then
      print_and_log "$(basename $0) needs the command $el to be installed"
      remove_pid_and_exit_in_error
    fi
  done
}

## $1 :: file
function perform_transformations() {
  local i=0
  for el in $transformers_base_dir/$publication_name/$job_name/[0-9]*; do
    if [[ "$el" == *".sh" ]]; then
      log "Applying transformation $(basename $el) to $1"
      bash $el $1 >> $log 2>> $log
      
      if [ $? -gt 0 ]; then
        log "$(red FAILED) The transformation $el on file $1" \
          "moving $1 to the error directory and skipping to next import XML"
        run mv $1 $escenic_spool_base_dir/$publication_name/$job_name/error
        return
      fi
    elif [[ "$el" == *".xsl" ]]; then
      log "Applying transformation $(basename $el) to $1"
      xsltproc --output ${1}.tmp ${el} ${1} >> $log 2>> $log
      
      if [ $? -gt 0 ]; then
        log "$(red FAILED) The transformation $el on file $1" \
          "moving $1 to the error directory and skipping to next import XML"
        run mv $1 $escenic_spool_base_dir/$publication_name/$job_name/error
        return
      else
        run mv ${1}.tmp ${1}
      fi
    elif [[ "$el" == *".pl" ]]; then
      log "Applying transformation $(basename $el) to $1"
      perl $el $1 >> $log 2>> $log
      if [ $? -gt 0 ]; then
        log "$(red FAILED) The transformation $el on file $1" \
          "moving $f to the error directory and skipping to next import XML"
        run mv $1 $escenic_spool_base_dir/$publication_name/$job_name/error
        return
      fi
    elif [[ "$el" == *".py" ]]; then
      log "Applying transformation $(basename $el) $1"
      python $el $f >> $log 2>> $log
      if [ $? -gt 0 ]; then
        log "$(red FAILED) The transformation $el on file $1" \
          "moving $1 to the error directory and skipping to next import XML"
        run mv $1 $escenic_spool_base_dir/$publication_name/$job_name/error
        return
      fi
    fi
    i=$(( i + 1 ))
  done
}

function import_raw_files() {
  raw_file_count=0
  for f in $(find $raw_spool_base_dir/$publication_name/$job_name -type f); do
    raw_file_count=$(( raw_file_count + 1 ))
    print_and_log "Importing raw XML #${raw_file_count}: $(basename $f) ..."
    perform_transformations $f

    log "Applied $i transformations to $f"
    if [ $(check_escenic_xml $f) -eq 0 ]; then
      log "Moving $f to" \
        $escenic_spool_base_dir/$publication_name/$job_name/new/$(basename $f)
      run mv $f $escenic_spool_base_dir/$publication_name/$job_name/new
    fi
  done
}

## $1 :: the XML
function check_escenic_xml() {
  if [ ! -e $1 ]; then
    echo 1
    return
  fi
  
  xmllint --format $1 > /dev/null 2>&1
  if [ $? -gt 0 ]; then
    log $(yellow WARNING) "XML #${raw_file_count} after transformations," \
      $f "isn't well formed XML. Importing it into Escenic Content Engine" \
      " will fail, so I'll move it to" \
      $escenic_spool_base_dir/$publication_name/$job_name/error
    run mv $1 $escenic_spool_base_dir/$publication_name/$job_name/error
    echo 1
    return
  fi

  echo 0
}

function verify_import_job_configuration() {
  verify_writable_dir_list \
    $raw_spool_base_dir/$publication_name/$job_name \
    $escenic_spool_base_dir/$publication_name/$job_name/new \
    $escenic_spool_base_dir/$publication_name/$job_name/archive \
    $escenic_spool_base_dir/$publication_name/$job_name/error
  verify_readable_dir_list $transformers_base_dir/$publication_name/$job_name

  local tranformation_count=$(
    ls $transformers_base_dir/$publication_name/$job_name | \
      grep ^[0-9] | \
      egrep ".sh$|.pl|.py" | \
      wc -l
  )
  
  if [ $tranformation_count -lt 1 ]; then
    print_and_log "$(yellow WARNING) No transformers found in" \
      "$transformers_base_dir/${job_name}, I'm assuming the incoming" \
      "data is already tranformed into Escenic Syndication XML"
  fi
}

check_pre_requisites
create_pid_if_doesnt_exist $pid_file
print_and_log "Started @ $(date)"
print "I'm logging to $log"
get_user_input "$@"
verify_import_job_configuration
import_raw_files
print_and_log "Finished @ $(date)"
remove_pid_if_exists $pid_file
