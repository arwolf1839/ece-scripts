#! /usr/bin/env bash

## Command which deployes an EAR and DEB package by their URIs.
##
## The command will deploy the EAR for all Escenic Content Engines and
## Search servers installed on the given host and will figure out
## instances and user/passwords by itself. It will also clear the work
## directory before starting the instances again. The last thing the
## script does, is to deploy the conf package.

function bootstrap_thyself() {
  # first, try to be nice, then check the standard location
  local dir=$(dirname $0)/../share/escenic/ece-scripts
  if [ ! -d $dir  ]; then
    dir=/usr/share/escenic/ece-scripts
  fi

  local common_libraries="
    common-bashing.sh
    common-io.sh
  "

  for el in $common_libraries; do
    source $dir/$el 2>/dev/null || {
      echo "$(basename $0): Could not load the library $el," \
        "and I can't live without it :-(" | fmt
      exit 1
    }
  done

  create_pid
  create_lock
  
  # hooks for when the scirpt exits cleanly and when a user or someone
  # kills the process
  trap common_bashing_exit_hook EXIT
  trap common_bashing_user_cancelled_hook SIGINT SIGHUP
}

bootstrap_thyself

log=/var/log/escenic/$(basename $0).log
tmp_dir=$(mkdir -p $HOME/$(date --iso))
run source /etc/default/ece

function deploy_ear() {
  for el in $engine_instance_list; do
	  su - $ece_unix_user -c \
	    "ece -i $el stop deploy clean start --uri $ear_uri"
  done
  for el in $search_instance_list; do
	  su - $ece_unix_user -c \
	    "ece -i $el -t search stop deploy clean start --uri $ear_uri"
    exit_on_error "Running ece deploy as $ece_unix_user"
  done
}

function set_builder_user_and_password() {
  run source /etc/escenic/ece.conf
  for el in $engine_instance_list; do
    file=/etc/escenic/ece-${el}.conf
    if [ -e $file ]; then
      run source $file
    fi
  done

  local found=0
  if [[ -n "$builder_http_user" && -n "$builder_http_password" ]]; then
    found=1
  fi
  
  if [ $found -eq 0 ]; then
    local file_list=/etc/escenic/ece.conf
    for el in $engine_instance_list; do
      file_list="$file_list /etc/escenic/ece-${el}.conf"
    done
    print_and_log \
      "You need to set builder_http_user & and builder_http_password" \
      "in one of these files:" \
      $file_list
    exit 1
  fi
}


function deploy_conf() {
  set_builder_user_and_password

  print "Downloading" $conf_package_uri "..."
  (
	  cd $tmp_dir
	  run wget \
	    --quiet \
	    --continue \
	    --http-user $builder_http_user \
	    --http-password $builder_http_password \
	    $conf_package_uri
  )

  print "Installing" $(basename $conf_package_uri) "..."
  dpkg --force-overwrite -i $tmp_dir/$(basename $conf_package_uri)
}

function read_user_input() {
  local next_is_ear_uri=0
  local next_is_conf_uri=0
  
  for el in "$@"; do
    if [[ $el == "--ear" ]]; then
      next_is_ear_uri=1
    elif [[ $el == "--conf" ]]; then
      next_is_conf_uri=1
    elif [ $next_is_ear_uri -eq 1 ]; then
      ear_uri=$el
      next_is_ear_uri=0
    elif [ $next_is_conf_uri -eq 1 ]; then
      conf_package_uri=$el
      next_is_ear_uri=0
    fi
  done
}

function verify_user_input() {
  local errors=0
  if [ -z "$conf_package_uri" ]; then
    print "You must specify the conf package with --conf :-("
    errors=1
  fi
  if [ -z "$ear_uri" ]; then
    print "You must specify the URI of the EAR file with --ear :-("
    errors=1
  fi
  if [ $errors -eq 1 ]; then
    exit 1
  fi
}

read_user_input "$@"
verify_user_input
deploy_ear
deploy_conf


