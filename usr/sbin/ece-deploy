#! /usr/bin/env bash

## Command which deployes an EAR and DEB package by their URIs.
##
## The command will deploy the EAR for all Escenic Content Engines and
## Search servers installed on the given host and will figure out
## instances and user/passwords by itself. It will also clear the work
## directory before starting the instances again. The last thing the
## script does, is to deploy the conf package.

ece_deploy_data_dir=/var/lib/escenic/$(basename $0)
ece_deploy_download_dir=/var/cache/escenic

function bootstrap_thyself() {
  # first, try to be nice, then check the standard location
  local dir=$(dirname $0)/../share/escenic/ece-scripts
  if [ ! -d $dir  ]; then
    dir=/usr/share/escenic/ece-scripts
  fi

  local common_libraries="
    common-bashing.sh
    common-io.sh
    common-os.sh
  "

  for el in $common_libraries; do
    source $dir/$el 2>/dev/null || {
      echo "$(basename $0): Could not load the library $el," \
        "and I can't live without it :-(" | fmt
      exit 1
    }
  done

  create_pid
  create_lock

  # hooks for when the scirpt exits cleanly and when a user or someone
  # kills the process
  trap common_bashing_exit_hook EXIT
  trap common_bashing_user_cancelled_hook SIGINT SIGHUP
}

bootstrap_thyself

log=/var/log/escenic/$(basename $0).log
run source /etc/default/ece

function get_old_dir() {
  local old_dir=$ece_deploy_data_dir/$deployment_id/old
  make_dir $old_dir
  echo $old_dir
}

function get_new_dir() {
  local new_dir=$ece_deploy_data_dir/$deployment_id/new
  make_dir $new_dir
  echo $new_dir
}

function deploy_ear() {
  local proxy_setings=""
  if [ -n "$http_proxy" ]; then
    proxy_settings="http_proxy=$http_proxy"
  fi

  print_and_log "Remembering the old deployment states for all instances ..."
  for el in $engine_instance_list $search_instance_list; do
    local file=/var/lib/escenic/${el}.state
    if [ -e $file ]; then
      run cp $file $(get_old_dir)
    fi
  done
    
  for el in $engine_instance_list; do
    su - $ece_unix_user -c \
      "${proxy_settings} ece -i $el stop deploy clean start --uri $ear_uri"
  done
  for el in $search_instance_list; do
    su - $ece_unix_user -c \
      "${proxy_settings} ece -i $el -t search stop deploy clean start --uri $ear_uri"
    exit_on_error "Running ece deploy as $ece_unix_user"
  done
}

function start_all_content_engine_instances() {
  for el in $engine_instance_list; do
    su - $ece_unix_user -c \
      "${proxy_settings} ece -i $el status restart"
  done
}  

function set_builder_user_and_password() {
  run source /etc/escenic/ece.conf
  for el in $engine_instance_list; do
    file=/etc/escenic/ece-${el}.conf
    if [ -e $file ]; then
      run source $file
    fi
  done

  local found=0
  if [[ -n "$builder_http_user" && -n "$builder_http_password" ]]; then
    found=1
  fi

  if [ $found -eq 0 ]; then
    local file_list=/etc/escenic/ece.conf
    for el in $engine_instance_list; do
      file_list="$file_list /etc/escenic/ece-${el}.conf"
    done
    print_and_log \
      "You need to set builder_http_user & and builder_http_password" \
      "in one of these files:" \
      $file_list
    exit 1
  fi
}

function deploy_conf() {
  if [ ${make_deployment-1} -eq 0 ]; then
    return
  fi

  make_dir $ece_deploy_download_dir

  set_builder_user_and_password

  print "Downloading" $conf_package_uri "..."
  (
  cd $ece_deploy_download_dir
  run wget \
    --quiet \
    --continue \
    --http-user $builder_http_user \
    --http-password $builder_http_password \
    $conf_package_uri
  )

  print "Installing" $(basename $conf_package_uri) "..."
  dpkg \
    --force-overwrite \
    --install $ece_deploy_download_dir/$(basename $conf_package_uri)
}

function read_user_input() {
  local next_is_ear_uri=0
  local next_is_conf_uri=0

  for el in "$@"; do
    if [[ $el == "--ear" ]]; then
      next_is_ear_uri=1
    elif [[ $el == "--conf" ]]; then
      next_is_conf_uri=1
    elif [[ $el == "--rollback" ]]; then
      roll_back=1
      next_is_roll_back_to_version=1
      make_deployment=0
    elif [[ $el == "--update-publication-resources" ]]; then
      update_the_publication_resources=1
    elif [[ $el == "--list-deployments" ]]; then
      list_the_revious_deployments=1
      make_deployment=0
    elif [ $next_is_ear_uri -eq 1 ]; then
      ear_uri=$el
      next_is_ear_uri=0
    elif [ $next_is_conf_uri -eq 1 ]; then
      conf_package_uri=$el
      next_is_ear_uri=0
    elif [ ${next_is_roll_back_to_version-0} -eq 1 ]; then
      roll_back_to_version=$el
      next_is_roll_back_to_version=0
    fi
  done
}

function verify_user_input() {
  local errors=0
  if [ ${roll_back-0} -eq 1 ]; then
    if [ -z "${roll_back_to_version}" ]; then
      print  "You must specify which version to roll back to."
      errors=1
    fi
  elif [ ${list_the_revious_deployments-0} -eq 1 ]; then
    nop=foo
  else
    if [ -z "$conf_package_uri" ]; then
      print "You must specify the conf package with --conf :-("
      errors=1
    fi
    if [ -z "$ear_uri" ]; then
      print "You must specify the URI of the EAR file with --ear :-("
      errors=1
    fi
  fi

  if [ $errors -eq 1 ]; then
    exit 1
  fi
}

function list_previous_deployments() {
  if [ ! -d $ece_deploy_data_dir ]; then
    return
  fi

  for el in $(find $ece_deploy_data_dir -maxdepth 1 -type d | \
    sed "s#${ece_deploy_data_dir}##g" | \
    sort -nr | \
    head -20); do
    local id=$(basename $el)
    echo "   - Deployment" ${id} \
      "was made @" \
      $(date --date="@$(echo ${id} | cut -d'-' -f2)")
  done
}

publication_resource_list="
    0/escenic/section-parameter
    escenic/content-type
    escenic/feature
    escenic/image-version
    escenic/layout
    escenic/layout-group
    escenic/plugin/community/security
    escenic/plugin/menu
    escenic/teaser-type
  "

function looks_like_xml() {
  local xml=$(cat "$1")
  if [[ ${xml:0:1} == "<" ]]; then
    echo 1
  else
    echo 0
  fi
}

## app server port
function get_publication_list() {
  curl --silent \
    --connect-timeout 30 \
    http://localhost:${1}/escenic-admin/pages/publication/list.jsp | \
    grep '/escenic-admin/pages/publication/view.jsp' | \
    sed 's/.*name=\(.*\)".*/\1/g'
}


## $1 :: base dir of the new publication resource to apply to the
## running instance. If this base dir is the $tomcat_base from the
## ece-<instance>.conf, the function will figure out the path to the
## publication resources inside the exploded publication specific
## webapps directories by itself.
function update_publication_resources() {
  if [ ! -d $1 ]; then
    return
  fi

  for el in $engine_instance_list; do
    source /etc/escenic/ece-${el}.conf
    
    local publication_list=$(get_publication_list ${appserver_port})
    if [ -z "${publication_list}" ]; then
      print_and_log "$el doesn't have any publications" \
        "so there's no publication resources to update ;-)"
      continue
    fi

    for publication in $publication_list; do
      print_and_log "Updating resources for publication" $publication "..."

      if [[ "$1" == "$tomcat_base" ]]; then
        local publication_resources_dir=$tomcat_base/webapps-${publication}/${publication}/META-INF/escenic/publication-resources
      else
        local publication_resources_dir=${1}/${publication}
      fi

      if [ ! -d $publication_resources_dir ]; then
        continue
      fi

      (
        cd $publication_resources_dir
        for ele in $(find -type f | sed 's#^./##g'); do
          new_dir=$ece_deploy_data_dir/$deployment_id/new/$publication/$(dirname $ele)
          make_dir $new_dir

          old_file=$ece_deploy_data_dir/$deployment_id/old/$publication/${ele}

          if [ $(looks_like_xml $ele) -eq 1 ]; then
            file=$new_dir/$(basename $ele)
            xmllint --format $ele > $file
          else
            file=$new_dir/$(basename $ele)
            cp $ele $dir/$(basename $ele)
          fi

          if [ ! -e $old_file ]; then
            old_file=$(mktemp)
          fi

          local number_of_lines_changed=$(
            diff \
              <(cat $old_file | grep -v '^$') \
              <(cat $file | grep -v '^$') | \
              egrep '<|>' | \
              wc -l
          )
          if [ ${number_of_lines_changed} -lt 1 ]; then
            continue
          fi

          print_and_log "Applying" \
            $number_of_lines_changed \
            "changes to" $ele \
            "full diff can be found here: $new_dir/$(basename $ele).diff"
          diff $old_file $file > $new_dir/$(basename $ele).diff

          run curl --silent \
            -T $ele \
            http://localhost:${appserver_port}/escenic-admin/publication-resources/${publication}/$ele
        done
      )
    done
  done
}

function generate_deployment_id() {
  deployment_id=${HOSTNAME}-$(date +%s)
  print_and_log "This deployment has ID" ${deployment_id}
}

function roll_back_everything_to_version() {
  print_and_log "Rolling back to" \
    ${roll_back_to_version} \
    "from" $(date --date @${roll_back_to_version}) \
    "..."

  local old_ece_deploy_data_dir=$ece_deploy_data_dir/${roll_back_to_version}/old
  if [ ! -d $old_ece_deploy_data_dir ]; then
    print_and_log "I cannot find ${roll_back_to_version}'s files," \
      "they should have been here:" $old_ece_deploy_data_dir
    exit 1
  else
    log "Using data in" $old_ece_deploy_data_dir "to perform the rollback"
  fi

  local package_version_file=$ece_deploy_data_dir/${roll_back_to_version}/new/vosa-conf-${HOSTNAME}.version
  if [ -e $package_version_file ]; then
    local deb_file=$ece_deploy_download_dir/vosa-conf-$HOSTNAME-$(cat $package_version_file).deb
    if [ -e $deb_file ]; then
      print_and_log "Reverting back to version" $(cat $package_version_file) \
        "vosa-conf-$HOSTNAME ..."
      dpkg --install --force-overwrite $deb_file
    else
      print_and_log "You must now install version" \
        $(cat $package_version_file) \
        "of the vosa-conf-$HOSTNAME package" \
        "I couldn't find it in" $deb_file
    fi
  else
    print_and_log "Couldn't find the previous version for vosa-conf-$HOSTNAME" \
      "you must get a hold of the latest/approriate one yourself."
  fi

  for el in $engine_instance_list; do
    file=$ece_deploy_data_dir/${roll_back_to_version}/new/${el}.state
    if [ ! -e $file ]; then
      continue
    fi

    # we source the state file to get the 'ear_used' value
    local old_ear=$(grep ear_used $file | cut -d'=' -f2)
    print_and_log "Rolling back ${el}'s EAR to ${old_ear} ..."
    ear_uri=${old_ear}
    deploy_ear
  done

  print_and_log "You have now rolled back to deployment ${roll_back_to_version}"
}

## $1 :: dir, can be the patht to the new or old directory of this
## deployment
function remember_state() {
  make_dir $1
  
  for el in $engine_instance_list $search_instance_list; do
    local file=/var/lib/escenic/${el}.state
    if [ -e $file ]; then
      cp /var/lib/escenic/${el}.state $1/
    fi
  done
  
  dpkg -l vosa-conf-$HOSTNAME 2>/dev/null | \
    grep vosa-conf-$HOSTNAME | \
    awk '{ print $3 }' > \
    $1/vosa-conf-${HOSTNAME}.version
}

function print_summary() {
  print_and_log "Finished @ $(date)"
  print_and_log "A full summary of the changes can be found in" \
    $ece_deploy_data_dir/${deployment_id} "Here's a short summary:"
  diff -r $ece_deploy_data_dir/${deployment_id}/old \
    $ece_deploy_data_dir/${deployment_id}/new
}

function crawl_a_wee_bit() {
  for el in $engine_instance_list; do
    source /etc/escenic/ece-${el}.conf
    local file=$tomcat_base/conf/server.xml
    local virtual_hosts=$(
      xml_grep \
        --nowrap \
        --text \
        --cond 'Server/Service/Engine/Host/Alias' \
        $file
    )

    for ele in $virtual_hosts; do
      print_and_log "Crawling $ele ..."
      echo wget \
        --page-requisites \
        --delete-after \
        --header "Host: $ele" http://localhost:${appserver_port}/
    done
  done
}

assert_commands_available xmllint xml_grep
read_user_input "$@"
verify_user_input

if [ ${list_the_revious_deployments-0} -eq 0 ]; then
  print_and_log "Started @ $(date)"
  generate_deployment_id
fi

if [ ${make_deployment-1} -eq 1 ]; then
  remember_state $ece_deploy_data_dir/$deployment_id/old

  deploy_ear
  deploy_conf
  
  if [ ${update_the_publication_resources-0} -eq 1 ]; then
    update_publication_resources $tomcat_base
  fi

  start_all_content_engine_instances
  remember_state $ece_deploy_data_dir/$deployment_id/new
  crawl_a_wee_bit
fi

if [ ${list_the_revious_deployments-0} -eq 1 ]; then
  list_previous_deployments
fi

if [ ${roll_back-0} -eq 1 ]; then
  roll_back_everything_to_version

  if [ ${update_the_publication_resources-0} -eq 1 ]; then
    update_publication_resources $ece_deploy_data_dir/${roll_back_to_version}/new
  fi
fi

if [ ${list_the_revious_deployments-0} -eq 0 ]; then
  print_summary
fi
